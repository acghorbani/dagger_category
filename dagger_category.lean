/-
Author: Alex Ghorbani 2022
-/

import category_theory.category.basic
import category_theory.functor.basic
import category_theory.monoidal.category
import category_theory.isomorphism
import category_theory.functor.category
import category_theory.full_subcategory

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open category_theory

namespace category_theory

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] 
          (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] 

/-!
Dagger Categories

A dagger category is a category C equipped with a function called 
the dagger function such that for every pair of objects A,B in C, the dagger function
sends morphisms A ‚ü∂ B to morphisms B ‚ü∂ A. In addition, the dagger function must satisfy
the following rules:

  for every A in C, dagger (ùüô A) = ùüô A,
  for every W X Y in C and every f : W ‚ü∂ X and g : X ‚ü∂ Y, 
    dagger f ‚â´ g = dagger g ‚â´ dagger f,
  for every A B in C and f : A ‚ü∂ B, dagger (dagger f) = f.  
-/

class dagger_category (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] :=
  (hom_dagger {x y : C} : (x ‚ü∂ y) ‚Üí (y ‚ü∂ x))
  (id_dagger (x) : hom_dagger (ùüô x) = ùüô x)
  (dagger_involutive {x y} (f : x ‚ü∂ y) : hom_dagger (hom_dagger f) = f)
  (comp_dagger {x y z} (f : x ‚ü∂ y) (g : y ‚ü∂ z) : 
    hom_dagger (f ‚â´ g) = hom_dagger g ‚â´ hom_dagger f)


variables [dagger_category C] [dagger_category D]

def is_unitary_morphism {x y : C} (f : x ‚ü∂ y) [is_iso f] : Prop := 
  dagger_category.hom_dagger f = inv f

def is_self_adjoint {x : C} (f : x ‚ü∂ x) : Prop := 
  dagger_category.hom_dagger f = f

/-
A dagger functor is a functor F between dagger categories such that 
  
  for any morphism f : x ‚ü∂ y in the source category C, 
    F (dagger_C f) = dagger_D (F f) 
-/

structure dagger_functor [dagger_category C] [dagger_category D] extends C ‚•§ D :=
  (blank {x y : C} (f : x ‚ü∂ y) : 
    map (dagger_category.hom_dagger f) = dagger_category.hom_dagger (map f))

/-
A monoidal dagger category is a dagger category which is also a monoidal category
where furthermore, the tensor product ‚äó respects the dagger function in the
following sense: 
  for any f : x ‚ü∂ y and g : a ‚ü∂ b, dagger (f ‚äó g) = dagger f ‚äó dagger g
-/

class monoidal_dagger_category [dagger_category C] [monoidal_category C] :=
  (tensor_of_morphism {w x y z : C} (f : w ‚ü∂ x) (g : y ‚ü∂ z) : 
    dagger_category.hom_dagger (f ‚äó g) 
    = dagger_category.hom_dagger f ‚äó dagger_category.hom_dagger g)

/-
dagger natural transformations
-/

/-
Category of dagger functors.

The category of dagger functors is a full subcategory of the category of 
functors. Namely, the objects are dagger functors and the morphisms are 
the natural transformations betweeen them
-/

def is_dagger_functor : (C ‚•§ D) ‚Üí Prop := sorry 

def dagger_functor_category (C D : Type*) := category_theory.full_subcategory is_dagger_functor

/-
A braided monoidal dagger category is a monoidal dagger category equipped with a
braiding natural isomorphism that respects the dagger function in the following sense:
  
-/

class braided_monoidal_dagger_category 
  [dagger_category C] [monoidal_category C] [monoidal_dagger_category C]

class symmetric_monoidal_dagger_category 
  [dagger_category C] [monoidal_category C] [monoidal_dagger_category C]
  [braided_monoidal_dagger_category C]

class compact_closed_dagger_category
  [dagger_category C] [monoidal_category C] [monoidal_dagger_category C]
  [braided_monoidal_dagger_category C] [symmetric_monoidal_dagger_category C]

end category_theory